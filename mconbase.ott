metavar value_name, x ::=
  {{ isa string }} {{ coq nat }} {{ coq-equality }} {{ hol string }} {{ ocaml int }}
  {{ lex alphanum }} 
metavar ident ::=
  {{ isa string }} {{ coq nat }} {{ hol string }} {{ ocaml int }}
  {{ lex Alphanum }} 
indexvar index, i, j, n, m ::=
  {{ isa nat }} {{ coq nat }}  {{ hol num }} {{ ocaml int }}
  {{ lex numeral }}
% the lex specifications above are not accurate - negative numerals, especially, 
% should be supported

grammar
% Type variables
typvar, tv :: TV_ ::= {{ coq-equality decide equality. apply eq_value_name. }}
  | ' ident                            ::   :: ident

% Type terms
typexpr, t :: TE_ ::=
  | typvar                             ::   :: var
  | typexpr -> typexpr'                ::   :: arrow
  | typexpr '*' typexpr'               ::   :: prod
  | con typexpr                        ::   :: concurrent
  | typexpr '+' typexpr'               ::   :: sum
  | ( typexpr )                        :: S :: paren {{ ich [[typexpr]] }} {{ ocaml [[typexpr]] }}

% Type scheme
typscheme, ts :: TS_ ::=  
  | ( typvar1 , .. , typvarn ) typexpr ::   :: ts  (+ bind typvar1 .. typvarn in typexpr +) 

  | generalise ( G , t )               :: M :: ts3 
    {{ isa (TS_ts (List.remdups (list_minus (ftv_typexpr [[t]]) (ftv_G [[G]]))) [[t]]) }}
    {{ coq (TS_ts (remove_duplicates (make_list_typvar (list_minus eq_typvar (ftv_typexpr [[t]]) (ftv_G [[G]])))) [[t]]) }} 
    {{ hol (TS_ts (remove_duplicates (list_minus (ftv_typexpr [[t]]) (ftv_G [[G]]))) [[t]]) }}
    {{ ocaml TODO }}

%TODO: it might be nicer to have ftv remove duplicates, or indeed
%return a set

% Constants
constant, c :: CONST_ ::=
  | ret                                ::   :: ret
  | fork                               ::   :: fork

% Terms
expr, e :: E_ ::=
  | value_name                           ::   :: ident
  | constant                             ::   :: constant
  | expr expr'                           ::   :: apply
  | expr >>= expr'                       ::   :: bind
  | function value_name -> expr          ::   :: function (+ bind value_name in expr +)
  | live expr                            ::   :: live_expr
  | { e , e' }                           ::   :: pair
  | ( expr )                             :: S :: paren {{ ich [[expr]] }} {{ ocaml [[expr]] }}
  | inl e                                ::   :: taggingleft
  | inr e                                ::   :: taggingright
  | case e1 of inl x1  => e2 | inr x2 => e3  ::   :: case
  | { v / x } e                        :: M :: subst 
    {{ isa subst_expr [[v]] [[x]] [[e]] }}
    {{ ch (subst_expr [[v]] [[x]] [[e]]) }}
    {{ ocaml (subst_expr [[v]] [[x]] [[e]]) }}

%Values
value, v :: V_ ::=
  | constant                           ::   :: constant
  | function value_name -> expr        ::   :: function
  | live expr                         ::   :: live_expr
  | inl v                              ::   :: taggedleft
  | inr v                              ::   :: taggedright
  | { v , v' }                         ::   :: valuepair


%Type environment
G {{ tex \Gamma }} :: G_ ::=
  | empty                              ::   :: em
  | G , value_name : typscheme         ::   :: vn

formula :: formula_ ::=
  | judgement                          ::   :: judgement
  | not ( formula )                    ::   :: not  
        {{ isa Not([[formula]]) }}
        {{ coq not([[formula]]) }}
        {{ hol ~([[formula]]) }}
        {{ ocaml TODO }}

  | typscheme > t                      ::   :: gen 
        {{ isa ? typvars . ? typexpr . ? s . 
             [[typscheme]] = TS_ts typvars typexpr 
             & typvars=List.map fst s 
             & tsubst_typexpr s typexpr = [[t]] }}
        {{ coq (exists tvs, exists txp, exists s, 
             [[typscheme]] = TS_ts tvs txp 
             /\ tvs = make_list_typvar
                    (List.map (fun (x:typvar*typexpr) => match x with (x1,x2) => x1 end) 
                              s)  
             /\ tsubst_typexpr s txp = [[t]]) }}
        {{ hol ? typvars typexpr s . 
             ([[typscheme]] = TS_ts typvars typexpr )
             /\ (typvars=MAP FST s )
             /\ (tsubst_typexpr s typexpr = [[t]]) }}
        {{ ocaml TODO }}

  | typscheme = typscheme'             ::   :: eqt 
        {{ ich [[typscheme]]=[[typscheme']] }} {{ ocaml TODO }}
  | value_name = value_name'           ::   :: eqv 
        {{ ich [[value_name]]=[[value_name']] }} {{ ocaml TODO }}


%Terminals
terminals :: terminals_ ::=
  |  ->                                ::   :: arrow      {{ tex \rightarrow }}
  |  function                          ::   :: function   {{ tex \textbf{function} }}
  | |-                                 ::   :: turnstile  {{ tex \vdash }}
  | -->                                ::   :: red        {{ tex \longrightarrow }}
  | '{'                                ::   :: leftbrace  {{ tex \{ }}
  | '}'                                ::   :: rightbrace {{ tex \} }}
  | con                                ::   :: concurrent {{ tex \textbf{concurrent} }}
  | live                               ::   :: conlive    {{ tex Live }}
  | >>=                                ::   :: bind {{ tex >>= }}
  | '*'                                ::   :: product_t    {{ tex * }}
  | ','                                ::   :: pair_elem   {{ tex , }}
  | inl                                ::   :: lefttag     {{ tex Left tag }}
  | inr                                ::   :: righttag    {{ tex Right tag }}
  | case                               ::   :: case    {{ tex Case }}
  | of                                 ::   :: of       {{ tex of }}
  | =>                                 ::   :: doublearrow {{ tex \Rightarrow }}
  | '+'                                ::   :: plus {{ tex + }}

% Subsumption: values are expressions
subrules
  v <:: expr

substitutions
  single   expr value_name :: subst  
  multiple typexpr typvar  :: tsubst 

freevars
  typexpr typvar :: ftv

embed
  {{ coq
Fixpoint remove_duplicates (l:list_typvar) : list_typvar :=
  match l with
  | Nil_list_typvar => Nil_list_typvar
  | Cons_list_typvar h t => 
    if (list_mem eq_typvar h (unmake_list_typvar t))  
    then remove_duplicates t
    else Cons_list_typvar h (remove_duplicates t)
end. }}

  {{ hol
val _ = Define `
  (remove_duplicates [] = []) /\
  (remove_duplicates (x::xs) = if (MEM x xs) then remove_duplicates xs 
                               else x::(remove_duplicates xs))
`; }}

  
defns 
Jtype :: '' ::= 

defn 
value_name : typscheme in G  :: :: VTSin :: VTSin_ by

--------------------------------------------------- :: vn1
value_name : typscheme in G, value_name:typscheme

value_name : typscheme in G
not(value_name = value_name')
--------------------------------------------------- :: vn2
value_name : typscheme in G, value_name':typscheme'


% base typing rules
defn
G |- constant : t :: :: G_constant :: constant_ by

% Primitive functions

------------------------ :: ret
G |- ret : t -> con t

------------------------ :: fork
G |- fork : (con t1) -> ((con t2) -> (con (((t1*t2) + (t1 * (con t2))) + ((con t1) * t2))))


% typing rules
defn 
G |- e : t :: :: Get :: Get_ by

x:typscheme in G
typscheme > t   
---------------- :: value_name
G |- x:t

:G_constant: G |- constant : t
------------------------------ :: constant
G |- constant : t

G |- e : t1->t2
G |- e' : t1 
---------------- :: apply
G |- e e' : t2

G,x1: ( ) t1 |- e : t
--------------------------- I :: lambda
G |- function x1->e : t1->t

G |- e : t
---------------------------  :: live
G |- live e : con t


G |- e : con t
G |- e' : t -> con t'
----------------------- :: bind
G |- e >>= e' : con t'

G |- e : t1
G |- e' : t2 
---------------- :: pair
G |- :E_pair: {e,e'} : (t1*t2)


% Sum type things
     G |- e : t
--------------------------- :: TInl
G |- inl e : t + t' 

     G |- e : t
--------------------------- :: TInr
G |- inr e : t' + t 

G |- e : t + t'
G,x : ( ) t |- e' : t''
G,x' : ( ) t' |- e'' : t''
--------------------------- :: TCase
G |- case e of inl x => e' | inr x' => e'' : t''

%evaluation rules
defns 
Jop :: JO_ ::= 

defn 
e --> e' :: :: red :: red_ by

------------------------------- :: app
(function x->e)  v --> {v/x}  e

%Concurrent constructs

%Live exressions are not allowed to move directly

%e --> e'
%--------------------------- :: live
%live e -->  live e'

%and finish

%--------------------------- :: die
%live v --> dead v

%Here should be the only path for concurrency

e --> e''
--------------------------- :: forkmove1
(fork (live e) ) (live e') -->  (fork (live e'') ) (live e')

e' --> e''
--------------------------- :: forkmove2
(fork (live e) ) (live e') -->  (fork (live e) ) (live e'') 

--------------------------- :: forkdeath1
(fork (live v) ) (live e') -->  live { v , ( live e' ) }

--------------------------- :: forkdeath2
(fork (live e) ) (live v) -->  live { ( live e ) , v }

--------------------------- :: forkdeath12
(fork (live v) ) (live v') -->  live { v , v' }

--------------------------- :: ret
ret v --> live v

e --> e'
--------------------------- :: evalbind
e >>= e'' --> e' >>= e''

e --> e'
--------------------------- :: movebind
(live e) >>= e'' --> (live e') >>= e'' 

--------------------------- :: dobind
(live v) >>= e --> e v 

%Context-application
% Evaluate argument first
% then the function
% the rest is taken care of by the app

e' --> e''
--------------  :: context_app1
e e' --> e e''

e --> e'
------------  :: context_app2
e v --> e' v


% Pairs
% Note this could be defined to be parallel, but I want to constrain concurrency to fork
e --> e' 
----------------------- :: pair_1
{ e , e'' } --> { e' , e'' }

e --> e'
----------------------- :: pair_2
{ v , e } --> { v, e' }


%Sum types
    e --> e'
---------------- :: evalinl
inl e --> inl e'

    e --> e'
---------------- :: evalinr
inr e --> inr e'

--------------------------------------------------------- :: evalcaseinl
case (inl v) of inl x => e | inr x' => e' --> { v / x } e

--------------------------------------------------------- :: evalcaseinr
case (inr v) of inl x => e | inr x' => e' --> { v / x' } e'

                                      e --> e'
------------------------------------------------------------------------------------ :: evalcase
case e of inl x => e'' | inr x' => e''' --> case e' of inl x => e'' | inr x' => e'''
