grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" forkProofs.v
grep -P "Proof\.([[:digit:]]|[^[:digit:]])+?Qed\." forkProofs.v

grep -P "(?:Lemma|Theorem)(?:\s)[a-zA-Z_]+?(?:\s:)(.\s)+?Proof\.(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||])" forkProofs.v


sed ' /\(\(Lemma\)\|\(Theorem\)\) \(.*\) :/ {
 
 /Qed\./ {p
          d}
}' 

sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed ' /\(\(Lemma\)\|\(Theorem\)\) \(.*\) :/ {
 /apply/p
 /Qed\./d
}'

sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/apply/p
 /Qed\./d'

sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/apply/ {s/apply \(.+\) ./\1/}'


sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '
/\(Lemma|Theorem\)/ 
/apply/ {s/apply \([a-zA-Z_0-9]*\).*/->\1/p}'


sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/Lemma\|Theorem/ {s/\(Lemma\|Theorem\).\([a-zA-Z_0-9]*\).:/\2;!/
          h }
/apply/ {s/apply \([a-zA-Z_0-9]*\).*/->\1;/
         H}
/Qed./ {x
        s/->/@->/Mg
        :repeat; s/\(.*\);!\(\([^@]\|\n\)*\)@/\1;!\2\1/gM; t repeat
        s/\(.*\);!/\1;/gM
        p
        d}'


s/\(Lemma|Theorem\).\([a-zA-Z_0-9]*\).:/\2/p 
s/apply \([a-zA-Z_0-9]*\).*/->\1/p


/apply/ {H}
/Qed./ {x
        s/\(.*\);\(.*\)->\(.*\)/\1;\2\1->\3/mgp
        d}

h
                     x
                     p

s/\(.*\);!\(.*\)boop->\(.*\)/\1;!\2\1->\3/Mg
s/\`\(.*\);\(.*\)->\(.*\)/\`\1;\2-->\3/Mg
s/\`\(.*\);\(.*\)->\(.*\)/\`\1;\2\1->\3/Mg


sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/Lemma\|Theorem/ {s/\(Lemma\|Theorem\).\([a-zA-Z_0-9]*\).:/\2;!/
          h }
/apply/ {s/apply \([a-zA-Z_0-9]*\).*/--\1;/
         H}
/Qed./ {x
        s/--/@--/Mg
        :repeat; s/\(.*\);!\(\([^@]\|\n\)*\)@/\1;!\2\1/gM; t repeat
        s/\(.*\);!/\1;/gM
        p
        d}' | sort | uniq > forkp.gv
sfdp -Tps forkp.gv -o forkp.ps


sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/Lemma\|Theorem/ {s/\(Lemma\|Theorem\).\([a-zA-Z_0-9]*\).:/\2;!/
          h }
/apply/ {s/apply \([a-zA-Z_0-9]*\).*/->\1;/
         H}
/Qed./ {x
        s/->/@->/Mg
        :repeat; s/\(.*\);!\(\([^@]\|\n\)*\)@/\1;!\2\1/gM; t repeat
        s/\(.*\);!/\1;/gM
        p
        d}' | sort | uniq > forkp.dot



−−



gvpr -c -f reverse.g  forkp.dot | gvpr -c -f reach.g -a"fork_comm_rel_lab_bisim" > forkp-r.dot

gvpr -c -f reach.g -a"fork_comm_rel_lab_bisim" forkprev.dot | gvpr -c -f reach.g -a"fork_comm_vewbsm" | dot -Tps -o forkp.ps


sed '/^$/d' forkProofs.v | grep -Po "(?:(?:Lemma|Theorem)(?:\s)([a-zA-Z_0-9]+?)(?:\s:))|(?:(?:apply|specialize)(?:\s)[a-zA-Z_]+?(?:\.|;|\||]| w| i))|(?:Qed.)" | sed -n  '/Lemma\|Theorem/ {s/\(Lemma\|Theorem\).\([a-zA-Z_0-9]*\).:/\2;!/
          h }
/apply/ {s/\(apply\|specialize\) \([a-zA-Z_0-9]*\).*/\2->;/
         H}
/Qed./ {x
        s/->/->@/Mg
        :repeat; s/\(.*\);!\(\([^@]\|\n\)*\)@/\1;!\2\1/gM; t repeat
        s/\(.*\);!/\1;/gM
        p
        d}' | sort | uniq | sed "1idigraph G{" | sed '$a}' > forkprev.dot
