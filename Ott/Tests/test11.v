(* generated by Ott 0.21.2 from: ./test11.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.


Definition termvar := nat.
Lemma eq_termvar: forall (x y : termvar), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_termvar : ott_coq_equality.

Inductive t : Set := 
 | t_Var (x:termvar)
 | t_Lam (x:termvar) (t5:t)
 | t_App (t5:t) (t':t)
 | t_Foo (v5:t).

(** subrules *)
Fixpoint is_t_of_t (t_6:t) : Prop :=
  match t_6 with
  | (t_Var x) => (True)
  | (t_Lam x t5) => ((is_t_of_t t5))
  | (t_App t5 t') => ((is_t_of_t t5) /\ (is_t_of_t t'))
  | (t_Foo v5) => ((is_v_of_t v5))
end
with is_v_of_t (t_6:t) : Prop :=
  match t_6 with
  | (t_Var x) => False
  | (t_Lam x t5) => ((is_t_of_t t5))
  | (t_App t5 t') => False
  | (t_Foo v5) => False
end.

(** definitions *)

(* defns Jb *)
Inductive Baz : t -> t -> Prop :=    (* defn Baz *)
 | ax : forall (t5 v5:t),
     is_t_of_t t5 ->
     is_v_of_t v5 ->
     Baz t5 v5.


