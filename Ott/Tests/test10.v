(* generated by Ott 0.21.2 from: test10.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.


Definition var := nat. (*r term variable *)
Lemma eq_var: forall (x y : var), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_var : ott_coq_equality.

Inductive term : Set :=  (*r term *)
 | t_var (x:var) (*r variable *)
 | t_app (t:term) (t':term) (*r app *)
 | t_idapp : term (*r identity-application *)
 | t_selapp : term (*r selector-application *)
 | t_subapp : term (*r substitution-application *).

(** substitutions *)
Fixpoint tsubst_term (t5:term) (x5:var) (t_6:term) {struct t_6} : term :=
  match t_6 with
  | (t_var x) => (if eq_var x x5 then t5 else (t_var x))
  | (t_app t t') => t_app (tsubst_term t5 x5 t) (tsubst_term t5 x5 t')
  | t_idapp => t_idapp 
  | t_selapp => t_selapp 
  | t_subapp => t_subapp 
end.

(** definitions *)

(* defns Jop *)
Inductive reduce : term -> term -> Prop :=    (* defn reduce *)
 | id_app : forall (t:term),
     reduce t_idapp t
 | sel_app : forall (t:term),
     reduce t_selapp t
 | sub_app : forall (t t'' t':term),
     reduce t_subapp  (t_app  (t_app t t'')   (t_app t' t'') ) 
 | ctx_app_fun : forall (t1 t t1':term),
     reduce t1 t1' ->
     reduce (t_app t1 t) (t_app t1' t).


Recursive Extraction reduce.