Preamble +

red_app -> forkmove2


Warning: Invalid character '.' in identifier "Top.subst_expr".
Warning: Invalid character '.' in identifier "Top.xis_value_of_expr".
Warning: The identifier e__6 contains __ which is reserved for the extraction
Warning: The identifier e__6 contains __ which is reserved for the extraction
type bool =
| True
| False

type nat =
| O
| S of nat

type 'a list =
| Nil
| Cons of 'a * 'a list

type sumbool =
| Left
| Right

type value_name = nat

(** val eq_value_name : value_name -> value_name -> sumbool **)

let rec eq_value_name n y0 =
  match n with
  | O ->
    (match y0 with
     | O -> Left
     | S n0 -> Right)
  | S n0 ->
    (match y0 with
     | O -> Right
     | S n1 -> eq_value_name n0 n1)

type ident = nat

type typvar =
  ident
  (* singleton inductive, whose constructor was TV_ident *)

type typconst =
| TC_unit

type typexpr =
| TE_constants of typconst
| TE_var of typvar
| TE_arrow of typexpr * typexpr
| TE_prod of typexpr * typexpr
| TE_concurrent of typexpr
| TE_sum of typexpr * typexpr

type constant =
| CONST_ret
| CONST_fork
| CONST_unit
| CONST_stop

type livemodes =
| LM_comp
| LM_expr of expr
and expr =
| E_ident of value_name
| E_constant of constant
| E_apply of expr * expr
| E_bind of expr * expr
| E_function of value_name * typexpr * expr
| E_fix of expr
| E_live_expr of livemodes
| E_pair of expr * expr
| E_taggingleft of expr
| E_taggingright of expr
| E_case of expr * value_name * expr * value_name * expr

type select =
| S_First
| S_Second

(** val list_mem : ('a1 -> 'a1 -> sumbool) -> 'a1 -> 'a1 list -> bool **)

let rec list_mem eq x = function
| Nil -> False
| Cons (h, t) ->
  (match eq h x with
   | Left -> True
   | Right -> list_mem eq x t)

(** val subst_expr : expr -> value_name -> expr -> expr **)

let rec subst_expr e_5 x_5 = function
| E_ident value_name5 ->
  (match eq_value_name value_name5 x_5 with
   | Left -> e_5
   | Right -> E_ident value_name5)
| E_constant constant5 -> E_constant constant5
| E_apply (expr5, expr') ->
  E_apply ((subst_expr e_5 x_5 expr5), (subst_expr e_5 x_5 expr'))
| E_bind (expr5, expr') ->
  E_bind ((subst_expr e_5 x_5 expr5), (subst_expr e_5 x_5 expr'))
| E_function (value_name5, typexpr5, expr5) ->
  E_function (value_name5, typexpr5,
    (match list_mem eq_value_name x_5 (Cons (value_name5, Nil)) with
     | True -> expr5
     | False -> subst_expr e_5 x_5 expr5))
| E_fix e -> E_fix (subst_expr e_5 x_5 e)
| E_live_expr lm -> E_live_expr (subst_livemodes e_5 x_5 lm)
| E_pair (e, e') -> E_pair ((subst_expr e_5 x_5 e), (subst_expr e_5 x_5 e'))
| E_taggingleft e -> E_taggingleft (subst_expr e_5 x_5 e)
| E_taggingright e -> E_taggingright (subst_expr e_5 x_5 e)
| E_case (e1, x1, e2, x2, e3) ->
  E_case ((subst_expr e_5 x_5 e1), x1, (subst_expr e_5 x_5 e2), x2,
    (subst_expr e_5 x_5 e3))

(** val subst_livemodes : expr -> value_name -> livemodes -> livemodes **)

and subst_livemodes e5 x5 = function
| LM_comp -> LM_comp
| LM_expr expr5 -> LM_expr (subst_expr e5 x5 expr5)

(** val xis_value_of_expr : expr -> bool **)

let rec xis_value_of_expr = function
| E_constant constant5 -> True
| E_apply (expr5, expr') ->
  (match expr5 with
   | E_constant constant5 ->
     (match constant5 with
      | CONST_fork -> xis_value_of_expr expr'
      | _ -> False)
   | _ -> False)
| E_function (value_name5, typexpr5, expr5) -> True
| E_fix e -> xis_value_of_expr e
| E_live_expr expr5 -> True
| E_pair (e, e') ->
  (match xis_value_of_expr e with
   | True -> xis_value_of_expr e'
   | False -> False)
| E_taggingleft e -> xis_value_of_expr e
| E_taggingright e -> xis_value_of_expr e
| _ -> False

type selectstar = __selectstar Lazy.t
and __selectstar =
| Seq of select * selectstar


(** val xJO_red12 : expr -> selectstar -> expr **)

let rec xJO_red12 p1 p2 =
  match (p1, p2) with
  | (E_apply (E_function (x, t, e), v), s) ->
    (match xis_value_of_expr v with
     | True -> subst_expr v x e
     | _ -> assert false (*  *))
  | (E_apply (E_constant CONST_ret, v), s) ->
    (match xis_value_of_expr v with
     | True -> E_live_expr (LM_expr v)
     | _ -> assert false (*  *))
  | (E_bind (E_live_expr LM_expr e, e''), s) ->
    (match xis_value_of_expr e with
     | False ->
       (match xJO_red12 e s with
        | e' -> E_bind ((E_live_expr (LM_expr e')), e'')
        | _ -> assert false (*  *))
     | True -> E_apply (e'', e)
     | _ -> assert false (*  *))
  | (E_bind (e, e''), s) ->
    (match xJO_red12 e s with
     | e' -> E_bind (e', e'')
     | _ -> assert false (*  *))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_expr v),
              E_live_expr LM_expr v'), Seq (S_First, s)) ->
    (match xJO_red12 v s with
     | e'' ->
       (match xis_value_of_expr v' with
        | False ->
          (match xis_value_of_expr v with
           | False ->
             E_apply ((E_apply ((E_constant CONST_fork), (E_live_expr
               (LM_expr e'')))), (E_live_expr (LM_expr v')))
           | _ -> assert false (*  *))
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_expr e),
              E_live_expr LM_expr e'), Seq (S_Second, s)) ->
    (match xJO_red12 e' s with
     | e'' ->
       (match xis_value_of_expr e' with
        | False ->
          (match xis_value_of_expr e with
           | False ->
             E_apply ((E_apply ((E_constant CONST_fork), (E_live_expr
               (LM_expr e)))), (E_live_expr (LM_expr e'')))
           | _ -> assert false (*  *))
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_expr v),
              E_live_expr LM_expr v'), s) ->
    (match xis_value_of_expr v' with
     | True ->
       (match xis_value_of_expr v with
        | True -> E_live_expr (LM_expr (E_pair (v, v')))
        | False ->
          E_live_expr (LM_expr (E_pair ((E_live_expr (LM_expr v)), v')))
        | _ -> assert false (*  *))
     | False ->
       (match xis_value_of_expr v with
        | True ->
          E_live_expr (LM_expr (E_pair (v, (E_live_expr (LM_expr v')))))
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_apply (E_apply (E_constant CONST_fork, v), E_live_expr lm), s) ->
    (match xJO_red12 v s with
     | e' ->
       (match xis_value_of_expr v with
        | False ->
          E_apply ((E_apply ((E_constant CONST_fork), e')), (E_live_expr lm))
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_apply (E_apply (E_constant CONST_fork, v), v'), s) ->
    (match xJO_red12 v' s with
     | e' ->
       (match xis_value_of_expr v' with
        | False -> E_apply ((E_apply ((E_constant CONST_fork), v)), e')
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_apply (e, e'), s) ->
    (match xis_value_of_expr e' with
     | False ->
       (match xJO_red12 e' s with
        | e'' -> E_apply (e, e'')
        | _ -> assert false (*  *))
     | True ->
       (match xJO_red12 e s with
        | e'0 -> E_apply (e'0, e'0)
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | _ -> assert false (*  *)





forkdocomp1 -> forkdocomp12

let rec xJO_red12 p1 p2 =
  match (p1, p2) with
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_comp),
              E_live_expr LM_expr e), s) ->
    E_live_expr (LM_expr (E_taggingleft (E_taggingright (E_pair ((E_constant
      CONST_unit), (E_live_expr (LM_expr e)))))))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_expr e),
              E_live_expr LM_comp), s) ->
    E_live_expr (LM_expr (E_taggingright (E_pair ((E_live_expr (LM_expr e)),
      (E_constant CONST_unit)))))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_comp),
              E_live_expr LM_comp), s) ->
    E_live_expr (LM_expr (E_taggingleft (E_taggingleft (E_pair ((E_constant
      CONST_unit), (E_constant CONST_unit))))))
  | _ -> assert false (*  *)


pair1 -> evalcase

let rec xJO_red12 p1 p2 =
  match (p1, p2) with
  | (E_pair (e, e''), s) ->
    (match xis_value_of_expr e with
     | False ->
       (match xJO_red12 e s with
        | e' -> E_pair (e', e'')
        | _ -> assert false (*  *))
     | True ->
       (match xJO_red12 e'' s with
        | e' -> E_pair (e, e')
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_taggingleft e, s) ->
    (match xJO_red12 e s with
     | e' -> E_taggingleft e'
     | _ -> assert false (*  *))
  | (E_taggingright e, s) ->
    (match xJO_red12 e s with
     | e' -> E_taggingright e'
     | _ -> assert false (*  *))
  | (E_case (E_taggingleft v, x, e, x', e'), s) ->
    (match xis_value_of_expr v with
     | True -> subst_expr v x e
     | _ -> assert false (*  *))
  | (E_case (E_taggingright v, x, e, x', e'), s) ->
    (match xis_value_of_expr v with
     | True -> subst_expr v x' e'
     | _ -> assert false (*  *))
  | (E_case (e, x, e'', x', e'''), s) ->
    (match xJO_red12 e s with
     | e' ->
       (match xis_value_of_expr e with
        | False -> E_case (e', x, e'', x', e''')
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | _ -> assert false (*  *)



forkdocomp1 -> evalcase

let rec xJO_red12 p1 p2 =
  match (p1, p2) with
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_comp),
              E_live_expr LM_expr e), s) ->
    E_live_expr (LM_expr (E_taggingleft (E_taggingright (E_pair ((E_constant
      CONST_unit), (E_live_expr (LM_expr e)))))))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_expr e),
              E_live_expr LM_comp), s) ->
    E_live_expr (LM_expr (E_taggingright (E_pair ((E_live_expr (LM_expr e)),
      (E_constant CONST_unit)))))
  | (E_apply (E_apply (E_constant CONST_fork, E_live_expr LM_comp),
              E_live_expr LM_comp), s) ->
    E_live_expr (LM_expr (E_taggingleft (E_taggingleft (E_pair ((E_constant
      CONST_unit), (E_constant CONST_unit))))))
  | (E_pair (e, e''), s) ->
    (match xis_value_of_expr e with
     | False ->
       (match xJO_red12 e s with
        | e' -> E_pair (e', e'')
        | _ -> assert false (*  *))
     | True ->
       (match xJO_red12 e'' s with
        | e' -> E_pair (e, e')
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | (E_taggingleft e, s) ->
    (match xJO_red12 e s with
     | e' -> E_taggingleft e'
     | _ -> assert false (*  *))
  | (E_taggingright e, s) ->
    (match xJO_red12 e s with
     | e' -> E_taggingright e'
     | _ -> assert false (*  *))
  | (E_case (E_taggingleft v, x, e, x', e'), s) ->
    (match xis_value_of_expr v with
     | True -> subst_expr v x e
     | _ -> assert false (*  *))
  | (E_case (E_taggingright v, x, e, x', e'), s) ->
    (match xis_value_of_expr v with
     | True -> subst_expr v x' e'
     | _ -> assert false (*  *))
  | (E_case (e, x, e'', x', e'''), s) ->
    (match xJO_red12 e s with
     | e' ->
       (match xis_value_of_expr e with
        | False -> E_case (e', x, e'', x', e''')
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | _ -> assert false (*  *)


fix_move -> fix_app

let rec xJO_red12 p1 p2 =
  match (p1, p2) with
  | (E_fix e, s) ->
    (match xJO_red12 e s with
     | e' -> E_fix e'
     | _ -> assert false (*  *))
  | (E_apply (E_fix v, v'), s) ->
    (match xis_value_of_expr v' with
     | true ->
       (match xis_value_of_expr v with
        | true -> E_apply ((E_fix v), (E_apply (v, v')))
        | _ -> assert false (*  *))
     | _ -> assert false (*  *))
  | _ -> assert false (*  *)
